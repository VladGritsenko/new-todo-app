{"version":3,"sources":["mobx/AppStore.js","components/TodoHeader/TodoHeader.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["todoListStore","this","activeFilter","todos","filter","todo","completed","every","observable","action","value","target","title","event","preventDefault","trim","length","id","v4","text","map","some","computed","observer","handleSubmit","AppStore","handleChange","className","onSubmit","onChange","placeholder","handleRemove","handleCheckBox","checked","type","htmlFor","onClick","filteredTodos","key","handleActiveFilter","handleClearCompleted","style","display","href","allTodoIsChecked","handleClickAll","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44e7a4eb.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\nimport { v4 } from 'uuid';\n\nclass Store {\n  @observable todos = [];\n\n  @observable title = '';\n\n  @observable activeFilter = 'all';\n\n  @action handleChange = ({ target: { value } }) => {\n    this.title = value;\n  };\n\n  @action handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.title.trim().length > 0) {\n      const id = v4();\n\n      this.todos = [\n        ...this.todos,\n        {\n          text: this.title,\n          completed: false,\n          id,\n        },\n      ];\n    }\n\n    this.title = '';\n  };\n\n  @action handleCheckBox = (id) => {\n    this.todos = this.todos.map((todo) => {\n      if (todo.id === id) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n  };\n\n  @action handleRemove = (id) => {\n    this.todos = this.todos.filter(todo => id !== todo.id);\n  };\n\n  @action handleActiveFilter = (activeFilter) => {\n    this.activeFilter = activeFilter;\n  };\n\n  @action handleClearCompleted = () => {\n    this.todos = this.todos.filter(todo => !todo.completed);\n  };\n\n  @action handleClickAll = () => {\n    this.todos = this.todos.some(todo => !todo.completed)\n      ? this.todos.map(todo => ({\n        ...todo, completed: true,\n      }))\n      : this.todos.map(todo => ({\n        ...todo, completed: !todo.completed,\n      }));\n  };\n\n  @computed get filteredTodos () {\n    switch (this.activeFilter) {\n      case 'active':\n        return this.todos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return this.todos.filter(todo => todo.completed);\n\n      default:\n        return this.todos;\n    }\n  }\n\n  @computed get allTodoIsChecked () {\n    return this.todos.every(todo => todo.completed);\n  }\n}\n\nconst todoListStore = new Store();\n\nexport default todoListStore;\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport AppStore from '../../mobx/AppStore';\n\nconst TodoHeader = () => {\n  const { handleSubmit, handleChange, title } = AppStore;\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          value={title}\n          onChange={handleChange}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n\nexport default observer(TodoHeader);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport AppStore from '../../mobx/AppStore';\n\nconst TodoItem = ({ todo }) => {\n  const { handleRemove, handleCheckBox } = AppStore;\n\n  return (\n    <li className={todo.completed ? 'completed' : ''}>\n      <div className=\"view\">\n        <input\n          onChange={() => handleCheckBox(todo.id)}\n          checked={todo.completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`todo-${todo.id}`}\n        />\n        <label htmlFor={`todo-${todo.id}`}>\n          {todo.text}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => handleRemove(todo.id)}\n        />\n      </div>\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.objectOf({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default observer(TodoItem);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport TodoItem from '../TodoItem/TodoItem';\nimport AppStore from '../../mobx/AppStore';\n\nconst TodoList = () => {\n  const { filteredTodos } = AppStore;\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <TodoItem todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  );\n};\n\nexport default observer(TodoList);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport AppStore from '../../mobx/AppStore';\n\nconst Footer = () => {\n  const {\n    todos, handleActiveFilter, activeFilter, handleClearCompleted,\n  } = AppStore;\n  const { completed } = todos;\n\n  return (\n    <footer className=\"footer\" style={{ display: 'block' }}>\n      <span className=\"todo-count\">\n        {todos.filter(todo => !completed).length}\n        {' '}\n        items left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={activeFilter === 'all' ? 'selected' : ''}\n            onClick={() => handleActiveFilter('all')}\n          >\n            All\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/active\"\n            className={activeFilter === 'active' ? 'selected' : ''}\n            onClick={() => handleActiveFilter('active')}\n          >\n            Active\n          </a>\n        </li>\n        <li>\n          <a\n            href=\"#/completed\"\n            className={activeFilter === 'completed' ? 'selected' : ''}\n            onClick={() => handleActiveFilter('completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n      {todos.some(({ completed }) => completed) && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          style={{ display: 'block' }}\n          onClick={handleClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nexport default observer(Footer);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport './App.css';\nimport AppStore from './mobx/AppStore';\nimport TodoHeader from './components/TodoHeader/TodoHeader';\nimport TodoList from './components/TodoList/TodoList';\nimport Footer from './components/Footer/Footer';\n\nconst App = () => {\n  const { todos, allTodoIsChecked, handleClickAll } = AppStore;\n\n  return (\n    <section className=\"todoapp\">\n      <TodoHeader />\n      <main className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={allTodoIsChecked}\n          onClick={handleClickAll}\n        />\n        {!!todos.length && (\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n        )}\n        <TodoList />\n      </main>\n      {!!todos.length && <Footer />}\n    </section>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}